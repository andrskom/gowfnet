// Code generated by MockGen. DO NOT EDIT.
// Source: net.go

// Package gowfnet is a generated GoMock package.
package gowfnet

import (
	context "context"
	state "github.com/andrskom/gowfnet/state"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStateReadInterface is a mock of StateReadInterface interface
type MockStateReadInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStateReadInterfaceMockRecorder
}

// MockStateReadInterfaceMockRecorder is the mock recorder for MockStateReadInterface
type MockStateReadInterfaceMockRecorder struct {
	mock *MockStateReadInterface
}

// NewMockStateReadInterface creates a new mock instance
func NewMockStateReadInterface(ctrl *gomock.Controller) *MockStateReadInterface {
	mock := &MockStateReadInterface{ctrl: ctrl}
	mock.recorder = &MockStateReadInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStateReadInterface) EXPECT() *MockStateReadInterfaceMockRecorder {
	return m.recorder
}

// IsStarted mocks base method
func (m *MockStateReadInterface) IsStarted() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStarted")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsStarted indicates an expected call of IsStarted
func (mr *MockStateReadInterfaceMockRecorder) IsStarted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStarted", reflect.TypeOf((*MockStateReadInterface)(nil).IsStarted))
}

// IsFinished mocks base method
func (m *MockStateReadInterface) IsFinished() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFinished")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFinished indicates an expected call of IsFinished
func (mr *MockStateReadInterfaceMockRecorder) IsFinished() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFinished", reflect.TypeOf((*MockStateReadInterface)(nil).IsFinished))
}

// IsError mocks base method
func (m *MockStateReadInterface) IsError() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsError")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsError indicates an expected call of IsError
func (mr *MockStateReadInterfaceMockRecorder) IsError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsError", reflect.TypeOf((*MockStateReadInterface)(nil).IsError))
}

// GetErrorStack mocks base method
func (m *MockStateReadInterface) GetErrorStack() state.ErrStackInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorStack")
	ret0, _ := ret[0].(state.ErrStackInterface)
	return ret0
}

// GetErrorStack indicates an expected call of GetErrorStack
func (mr *MockStateReadInterfaceMockRecorder) GetErrorStack() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorStack", reflect.TypeOf((*MockStateReadInterface)(nil).GetErrorStack))
}

// GetPlaces mocks base method
func (m *MockStateReadInterface) GetPlaces() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaces")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetPlaces indicates an expected call of GetPlaces
func (mr *MockStateReadInterfaceMockRecorder) GetPlaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaces", reflect.TypeOf((*MockStateReadInterface)(nil).GetPlaces))
}

// MockStateOpInterface is a mock of StateOpInterface interface
type MockStateOpInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStateOpInterfaceMockRecorder
}

// MockStateOpInterfaceMockRecorder is the mock recorder for MockStateOpInterface
type MockStateOpInterfaceMockRecorder struct {
	mock *MockStateOpInterface
}

// NewMockStateOpInterface creates a new mock instance
func NewMockStateOpInterface(ctrl *gomock.Controller) *MockStateOpInterface {
	mock := &MockStateOpInterface{ctrl: ctrl}
	mock.recorder = &MockStateOpInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStateOpInterface) EXPECT() *MockStateOpInterfaceMockRecorder {
	return m.recorder
}

// IsStarted mocks base method
func (m *MockStateOpInterface) IsStarted() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStarted")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsStarted indicates an expected call of IsStarted
func (mr *MockStateOpInterfaceMockRecorder) IsStarted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStarted", reflect.TypeOf((*MockStateOpInterface)(nil).IsStarted))
}

// IsFinished mocks base method
func (m *MockStateOpInterface) IsFinished() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFinished")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFinished indicates an expected call of IsFinished
func (mr *MockStateOpInterfaceMockRecorder) IsFinished() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFinished", reflect.TypeOf((*MockStateOpInterface)(nil).IsFinished))
}

// IsError mocks base method
func (m *MockStateOpInterface) IsError() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsError")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsError indicates an expected call of IsError
func (mr *MockStateOpInterfaceMockRecorder) IsError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsError", reflect.TypeOf((*MockStateOpInterface)(nil).IsError))
}

// GetErrorStack mocks base method
func (m *MockStateOpInterface) GetErrorStack() state.ErrStackInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorStack")
	ret0, _ := ret[0].(state.ErrStackInterface)
	return ret0
}

// GetErrorStack indicates an expected call of GetErrorStack
func (mr *MockStateOpInterfaceMockRecorder) GetErrorStack() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorStack", reflect.TypeOf((*MockStateOpInterface)(nil).GetErrorStack))
}

// GetPlaces mocks base method
func (m *MockStateOpInterface) GetPlaces() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaces")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetPlaces indicates an expected call of GetPlaces
func (mr *MockStateOpInterfaceMockRecorder) GetPlaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaces", reflect.TypeOf((*MockStateOpInterface)(nil).GetPlaces))
}

// SetFinished mocks base method
func (m *MockStateOpInterface) SetFinished() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFinished")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFinished indicates an expected call of SetFinished
func (mr *MockStateOpInterfaceMockRecorder) SetFinished() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFinished", reflect.TypeOf((*MockStateOpInterface)(nil).SetFinished))
}

// AddError mocks base method
func (m *MockStateOpInterface) AddError(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddError", err)
}

// AddError indicates an expected call of AddError
func (mr *MockStateOpInterfaceMockRecorder) AddError(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddError", reflect.TypeOf((*MockStateOpInterface)(nil).AddError), err)
}

// MockStateInterface is a mock of StateInterface interface
type MockStateInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStateInterfaceMockRecorder
}

// MockStateInterfaceMockRecorder is the mock recorder for MockStateInterface
type MockStateInterfaceMockRecorder struct {
	mock *MockStateInterface
}

// NewMockStateInterface creates a new mock instance
func NewMockStateInterface(ctrl *gomock.Controller) *MockStateInterface {
	mock := &MockStateInterface{ctrl: ctrl}
	mock.recorder = &MockStateInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStateInterface) EXPECT() *MockStateInterfaceMockRecorder {
	return m.recorder
}

// IsStarted mocks base method
func (m *MockStateInterface) IsStarted() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStarted")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsStarted indicates an expected call of IsStarted
func (mr *MockStateInterfaceMockRecorder) IsStarted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStarted", reflect.TypeOf((*MockStateInterface)(nil).IsStarted))
}

// IsFinished mocks base method
func (m *MockStateInterface) IsFinished() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFinished")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFinished indicates an expected call of IsFinished
func (mr *MockStateInterfaceMockRecorder) IsFinished() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFinished", reflect.TypeOf((*MockStateInterface)(nil).IsFinished))
}

// IsError mocks base method
func (m *MockStateInterface) IsError() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsError")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsError indicates an expected call of IsError
func (mr *MockStateInterfaceMockRecorder) IsError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsError", reflect.TypeOf((*MockStateInterface)(nil).IsError))
}

// GetErrorStack mocks base method
func (m *MockStateInterface) GetErrorStack() state.ErrStackInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorStack")
	ret0, _ := ret[0].(state.ErrStackInterface)
	return ret0
}

// GetErrorStack indicates an expected call of GetErrorStack
func (mr *MockStateInterfaceMockRecorder) GetErrorStack() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorStack", reflect.TypeOf((*MockStateInterface)(nil).GetErrorStack))
}

// GetPlaces mocks base method
func (m *MockStateInterface) GetPlaces() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaces")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetPlaces indicates an expected call of GetPlaces
func (mr *MockStateInterfaceMockRecorder) GetPlaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaces", reflect.TypeOf((*MockStateInterface)(nil).GetPlaces))
}

// SetFinished mocks base method
func (m *MockStateInterface) SetFinished() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFinished")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFinished indicates an expected call of SetFinished
func (mr *MockStateInterfaceMockRecorder) SetFinished() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFinished", reflect.TypeOf((*MockStateInterface)(nil).SetFinished))
}

// AddError mocks base method
func (m *MockStateInterface) AddError(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddError", err)
}

// AddError indicates an expected call of AddError
func (mr *MockStateInterfaceMockRecorder) AddError(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddError", reflect.TypeOf((*MockStateInterface)(nil).AddError), err)
}

// WithListener mocks base method
func (m *MockStateInterface) WithListener(listener state.ListenerInterface) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WithListener", listener)
}

// WithListener indicates an expected call of WithListener
func (mr *MockStateInterfaceMockRecorder) WithListener(listener interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithListener", reflect.TypeOf((*MockStateInterface)(nil).WithListener), listener)
}

// MoveTokensFromPlacesToPlaces mocks base method
func (m *MockStateInterface) MoveTokensFromPlacesToPlaces(ctx context.Context, from, to []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveTokensFromPlacesToPlaces", ctx, from, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveTokensFromPlacesToPlaces indicates an expected call of MoveTokensFromPlacesToPlaces
func (mr *MockStateInterfaceMockRecorder) MoveTokensFromPlacesToPlaces(ctx, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveTokensFromPlacesToPlaces", reflect.TypeOf((*MockStateInterface)(nil).MoveTokensFromPlacesToPlaces), ctx, from, to)
}

// MockListenerInterface is a mock of ListenerInterface interface
type MockListenerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockListenerInterfaceMockRecorder
}

// MockListenerInterfaceMockRecorder is the mock recorder for MockListenerInterface
type MockListenerInterfaceMockRecorder struct {
	mock *MockListenerInterface
}

// NewMockListenerInterface creates a new mock instance
func NewMockListenerInterface(ctrl *gomock.Controller) *MockListenerInterface {
	mock := &MockListenerInterface{ctrl: ctrl}
	mock.recorder = &MockListenerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockListenerInterface) EXPECT() *MockListenerInterfaceMockRecorder {
	return m.recorder
}

// BeforeStart mocks base method
func (m *MockListenerInterface) BeforeStart(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeStart", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// BeforeStart indicates an expected call of BeforeStart
func (mr *MockListenerInterfaceMockRecorder) BeforeStart(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeStart", reflect.TypeOf((*MockListenerInterface)(nil).BeforeStart), ctx)
}

// AfterStart mocks base method
func (m *MockListenerInterface) AfterStart(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AfterStart", ctx)
}

// AfterStart indicates an expected call of AfterStart
func (mr *MockListenerInterfaceMockRecorder) AfterStart(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterStart", reflect.TypeOf((*MockListenerInterface)(nil).AfterStart), ctx)
}

// BeforeTransition mocks base method
func (m *MockListenerInterface) BeforeTransition(ctx context.Context, transitionID string, state StateOpInterface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeTransition", ctx, transitionID, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// BeforeTransition indicates an expected call of BeforeTransition
func (mr *MockListenerInterfaceMockRecorder) BeforeTransition(ctx, transitionID, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeTransition", reflect.TypeOf((*MockListenerInterface)(nil).BeforeTransition), ctx, transitionID, state)
}

// AfterTransition mocks base method
func (m *MockListenerInterface) AfterTransition(ctx context.Context, transitionID string, state StateOpInterface) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AfterTransition", ctx, transitionID, state)
}

// AfterTransition indicates an expected call of AfterTransition
func (mr *MockListenerInterfaceMockRecorder) AfterTransition(ctx, transitionID, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterTransition", reflect.TypeOf((*MockListenerInterface)(nil).AfterTransition), ctx, transitionID, state)
}

// HasStateListener mocks base method
func (m *MockListenerInterface) HasStateListener() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasStateListener")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasStateListener indicates an expected call of HasStateListener
func (mr *MockListenerInterfaceMockRecorder) HasStateListener() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasStateListener", reflect.TypeOf((*MockListenerInterface)(nil).HasStateListener))
}

// GetStateListener mocks base method
func (m *MockListenerInterface) GetStateListener() state.ListenerInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateListener")
	ret0, _ := ret[0].(state.ListenerInterface)
	return ret0
}

// GetStateListener indicates an expected call of GetStateListener
func (mr *MockListenerInterfaceMockRecorder) GetStateListener() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateListener", reflect.TypeOf((*MockListenerInterface)(nil).GetStateListener))
}
