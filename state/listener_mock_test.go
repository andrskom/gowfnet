// Code generated by MockGen. DO NOT EDIT.
// Source: state/listener.go

// Package state is a generated GoMock package.
package state

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockOpInterface is a mock of OpInterface interface
type MockOpInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOpInterfaceMockRecorder
}

// MockOpInterfaceMockRecorder is the mock recorder for MockOpInterface
type MockOpInterfaceMockRecorder struct {
	mock *MockOpInterface
}

// NewMockOpInterface creates a new mock instance
func NewMockOpInterface(ctrl *gomock.Controller) *MockOpInterface {
	mock := &MockOpInterface{ctrl: ctrl}
	mock.recorder = &MockOpInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOpInterface) EXPECT() *MockOpInterfaceMockRecorder {
	return m.recorder
}

// GetErrorStack mocks base method
func (m *MockOpInterface) GetErrorStack() ErrStackInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorStack")
	ret0, _ := ret[0].(ErrStackInterface)
	return ret0
}

// GetErrorStack indicates an expected call of GetErrorStack
func (mr *MockOpInterfaceMockRecorder) GetErrorStack() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorStack", reflect.TypeOf((*MockOpInterface)(nil).GetErrorStack))
}

// GetPlaces mocks base method
func (m *MockOpInterface) GetPlaces() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaces")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetPlaces indicates an expected call of GetPlaces
func (mr *MockOpInterfaceMockRecorder) GetPlaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaces", reflect.TypeOf((*MockOpInterface)(nil).GetPlaces))
}

// IsError mocks base method
func (m *MockOpInterface) IsError() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsError")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsError indicates an expected call of IsError
func (mr *MockOpInterfaceMockRecorder) IsError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsError", reflect.TypeOf((*MockOpInterface)(nil).IsError))
}

// AddError mocks base method
func (m *MockOpInterface) AddError(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddError", err)
}

// AddError indicates an expected call of AddError
func (mr *MockOpInterfaceMockRecorder) AddError(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddError", reflect.TypeOf((*MockOpInterface)(nil).AddError), err)
}

// IsFinished mocks base method
func (m *MockOpInterface) IsFinished() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFinished")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFinished indicates an expected call of IsFinished
func (mr *MockOpInterfaceMockRecorder) IsFinished() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFinished", reflect.TypeOf((*MockOpInterface)(nil).IsFinished))
}

// SetFinished mocks base method
func (m *MockOpInterface) SetFinished() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFinished")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFinished indicates an expected call of SetFinished
func (mr *MockOpInterfaceMockRecorder) SetFinished() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFinished", reflect.TypeOf((*MockOpInterface)(nil).SetFinished))
}

// IsStarted mocks base method
func (m *MockOpInterface) IsStarted() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStarted")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsStarted indicates an expected call of IsStarted
func (mr *MockOpInterfaceMockRecorder) IsStarted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStarted", reflect.TypeOf((*MockOpInterface)(nil).IsStarted))
}
